// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: haproxy.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HAProxyManagerService_GetVersion_FullMethodName        = "/haproxy.v1.HAProxyManagerService/GetVersion"
	HAProxyManagerService_CreateTransaction_FullMethodName = "/haproxy.v1.HAProxyManagerService/CreateTransaction"
	HAProxyManagerService_GetTransaction_FullMethodName    = "/haproxy.v1.HAProxyManagerService/GetTransaction"
	HAProxyManagerService_CommitTransaction_FullMethodName = "/haproxy.v1.HAProxyManagerService/CommitTransaction"
	HAProxyManagerService_CloseTransaction_FullMethodName  = "/haproxy.v1.HAProxyManagerService/CloseTransaction"
	HAProxyManagerService_CreateBackend_FullMethodName     = "/haproxy.v1.HAProxyManagerService/CreateBackend"
	HAProxyManagerService_GetBackend_FullMethodName        = "/haproxy.v1.HAProxyManagerService/GetBackend"
	HAProxyManagerService_ListBackends_FullMethodName      = "/haproxy.v1.HAProxyManagerService/ListBackends"
	HAProxyManagerService_UpdateBackend_FullMethodName     = "/haproxy.v1.HAProxyManagerService/UpdateBackend"
	HAProxyManagerService_DeleteBackend_FullMethodName     = "/haproxy.v1.HAProxyManagerService/DeleteBackend"
	HAProxyManagerService_CreateFrontend_FullMethodName    = "/haproxy.v1.HAProxyManagerService/CreateFrontend"
	HAProxyManagerService_GetFrontend_FullMethodName       = "/haproxy.v1.HAProxyManagerService/GetFrontend"
	HAProxyManagerService_ListFrontends_FullMethodName     = "/haproxy.v1.HAProxyManagerService/ListFrontends"
	HAProxyManagerService_UpdateFrontend_FullMethodName    = "/haproxy.v1.HAProxyManagerService/UpdateFrontend"
	HAProxyManagerService_DeleteFrontend_FullMethodName    = "/haproxy.v1.HAProxyManagerService/DeleteFrontend"
	HAProxyManagerService_CreateBind_FullMethodName        = "/haproxy.v1.HAProxyManagerService/CreateBind"
	HAProxyManagerService_GetBind_FullMethodName           = "/haproxy.v1.HAProxyManagerService/GetBind"
	HAProxyManagerService_ListBinds_FullMethodName         = "/haproxy.v1.HAProxyManagerService/ListBinds"
	HAProxyManagerService_UpdateBind_FullMethodName        = "/haproxy.v1.HAProxyManagerService/UpdateBind"
	HAProxyManagerService_DeleteBind_FullMethodName        = "/haproxy.v1.HAProxyManagerService/DeleteBind"
	HAProxyManagerService_CreateServer_FullMethodName      = "/haproxy.v1.HAProxyManagerService/CreateServer"
	HAProxyManagerService_GetServer_FullMethodName         = "/haproxy.v1.HAProxyManagerService/GetServer"
	HAProxyManagerService_ListServers_FullMethodName       = "/haproxy.v1.HAProxyManagerService/ListServers"
	HAProxyManagerService_UpdateServer_FullMethodName      = "/haproxy.v1.HAProxyManagerService/UpdateServer"
	HAProxyManagerService_DeleteServer_FullMethodName      = "/haproxy.v1.HAProxyManagerService/DeleteServer"
)

// HAProxyManagerServiceClient is the client API for HAProxyManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HAProxyManagerService provides a unified interface for managing HAProxy configuration
// This service aggregates all HAProxy configuration operations into a single service
type HAProxyManagerServiceClient interface {
	// Transaction operations
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	CommitTransaction(ctx context.Context, in *CommitTransactionRequest, opts ...grpc.CallOption) (*CommitTransactionResponse, error)
	CloseTransaction(ctx context.Context, in *CloseTransactionRequest, opts ...grpc.CallOption) (*CloseTransactionResponse, error)
	// Backend operations
	CreateBackend(ctx context.Context, in *CreateBackendRequest, opts ...grpc.CallOption) (*CreateBackendResponse, error)
	GetBackend(ctx context.Context, in *GetBackendRequest, opts ...grpc.CallOption) (*GetBackendResponse, error)
	ListBackends(ctx context.Context, in *ListBackendsRequest, opts ...grpc.CallOption) (*ListBackendsResponse, error)
	UpdateBackend(ctx context.Context, in *UpdateBackendRequest, opts ...grpc.CallOption) (*UpdateBackendResponse, error)
	DeleteBackend(ctx context.Context, in *DeleteBackendRequest, opts ...grpc.CallOption) (*DeleteBackendResponse, error)
	// Frontend operations
	CreateFrontend(ctx context.Context, in *CreateFrontendRequest, opts ...grpc.CallOption) (*CreateFrontendResponse, error)
	GetFrontend(ctx context.Context, in *GetFrontendRequest, opts ...grpc.CallOption) (*GetFrontendResponse, error)
	ListFrontends(ctx context.Context, in *ListFrontendsRequest, opts ...grpc.CallOption) (*ListFrontendsResponse, error)
	UpdateFrontend(ctx context.Context, in *UpdateFrontendRequest, opts ...grpc.CallOption) (*UpdateFrontendResponse, error)
	DeleteFrontend(ctx context.Context, in *DeleteFrontendRequest, opts ...grpc.CallOption) (*DeleteFrontendResponse, error)
	// Bind operations (binds are associated with frontends)
	CreateBind(ctx context.Context, in *CreateBindRequest, opts ...grpc.CallOption) (*CreateBindResponse, error)
	GetBind(ctx context.Context, in *GetBindRequest, opts ...grpc.CallOption) (*GetBindResponse, error)
	ListBinds(ctx context.Context, in *ListBindsRequest, opts ...grpc.CallOption) (*ListBindsResponse, error)
	UpdateBind(ctx context.Context, in *UpdateBindRequest, opts ...grpc.CallOption) (*UpdateBindResponse, error)
	DeleteBind(ctx context.Context, in *DeleteBindRequest, opts ...grpc.CallOption) (*DeleteBindResponse, error)
	// Server operations (servers are associated with backends)
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error)
	GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*GetServerResponse, error)
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
	UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*UpdateServerResponse, error)
	DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error)
}

type hAProxyManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHAProxyManagerServiceClient(cc grpc.ClientConnInterface) HAProxyManagerServiceClient {
	return &hAProxyManagerServiceClient{cc}
}

func (c *hAProxyManagerServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_GetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_CreateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_GetTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) CommitTransaction(ctx context.Context, in *CommitTransactionRequest, opts ...grpc.CallOption) (*CommitTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitTransactionResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_CommitTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) CloseTransaction(ctx context.Context, in *CloseTransactionRequest, opts ...grpc.CallOption) (*CloseTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseTransactionResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_CloseTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) CreateBackend(ctx context.Context, in *CreateBackendRequest, opts ...grpc.CallOption) (*CreateBackendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBackendResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_CreateBackend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) GetBackend(ctx context.Context, in *GetBackendRequest, opts ...grpc.CallOption) (*GetBackendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBackendResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_GetBackend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) ListBackends(ctx context.Context, in *ListBackendsRequest, opts ...grpc.CallOption) (*ListBackendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBackendsResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_ListBackends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) UpdateBackend(ctx context.Context, in *UpdateBackendRequest, opts ...grpc.CallOption) (*UpdateBackendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBackendResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_UpdateBackend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) DeleteBackend(ctx context.Context, in *DeleteBackendRequest, opts ...grpc.CallOption) (*DeleteBackendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBackendResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_DeleteBackend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) CreateFrontend(ctx context.Context, in *CreateFrontendRequest, opts ...grpc.CallOption) (*CreateFrontendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFrontendResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_CreateFrontend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) GetFrontend(ctx context.Context, in *GetFrontendRequest, opts ...grpc.CallOption) (*GetFrontendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFrontendResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_GetFrontend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) ListFrontends(ctx context.Context, in *ListFrontendsRequest, opts ...grpc.CallOption) (*ListFrontendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFrontendsResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_ListFrontends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) UpdateFrontend(ctx context.Context, in *UpdateFrontendRequest, opts ...grpc.CallOption) (*UpdateFrontendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFrontendResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_UpdateFrontend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) DeleteFrontend(ctx context.Context, in *DeleteFrontendRequest, opts ...grpc.CallOption) (*DeleteFrontendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFrontendResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_DeleteFrontend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) CreateBind(ctx context.Context, in *CreateBindRequest, opts ...grpc.CallOption) (*CreateBindResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBindResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_CreateBind_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) GetBind(ctx context.Context, in *GetBindRequest, opts ...grpc.CallOption) (*GetBindResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBindResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_GetBind_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) ListBinds(ctx context.Context, in *ListBindsRequest, opts ...grpc.CallOption) (*ListBindsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBindsResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_ListBinds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) UpdateBind(ctx context.Context, in *UpdateBindRequest, opts ...grpc.CallOption) (*UpdateBindResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBindResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_UpdateBind_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) DeleteBind(ctx context.Context, in *DeleteBindRequest, opts ...grpc.CallOption) (*DeleteBindResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBindResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_DeleteBind_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateServerResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_CreateServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*GetServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServerResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_GetServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServersResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_ListServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*UpdateServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateServerResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_UpdateServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hAProxyManagerServiceClient) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteServerResponse)
	err := c.cc.Invoke(ctx, HAProxyManagerService_DeleteServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HAProxyManagerServiceServer is the server API for HAProxyManagerService service.
// All implementations must embed UnimplementedHAProxyManagerServiceServer
// for forward compatibility.
//
// HAProxyManagerService provides a unified interface for managing HAProxy configuration
// This service aggregates all HAProxy configuration operations into a single service
type HAProxyManagerServiceServer interface {
	// Transaction operations
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	CommitTransaction(context.Context, *CommitTransactionRequest) (*CommitTransactionResponse, error)
	CloseTransaction(context.Context, *CloseTransactionRequest) (*CloseTransactionResponse, error)
	// Backend operations
	CreateBackend(context.Context, *CreateBackendRequest) (*CreateBackendResponse, error)
	GetBackend(context.Context, *GetBackendRequest) (*GetBackendResponse, error)
	ListBackends(context.Context, *ListBackendsRequest) (*ListBackendsResponse, error)
	UpdateBackend(context.Context, *UpdateBackendRequest) (*UpdateBackendResponse, error)
	DeleteBackend(context.Context, *DeleteBackendRequest) (*DeleteBackendResponse, error)
	// Frontend operations
	CreateFrontend(context.Context, *CreateFrontendRequest) (*CreateFrontendResponse, error)
	GetFrontend(context.Context, *GetFrontendRequest) (*GetFrontendResponse, error)
	ListFrontends(context.Context, *ListFrontendsRequest) (*ListFrontendsResponse, error)
	UpdateFrontend(context.Context, *UpdateFrontendRequest) (*UpdateFrontendResponse, error)
	DeleteFrontend(context.Context, *DeleteFrontendRequest) (*DeleteFrontendResponse, error)
	// Bind operations (binds are associated with frontends)
	CreateBind(context.Context, *CreateBindRequest) (*CreateBindResponse, error)
	GetBind(context.Context, *GetBindRequest) (*GetBindResponse, error)
	ListBinds(context.Context, *ListBindsRequest) (*ListBindsResponse, error)
	UpdateBind(context.Context, *UpdateBindRequest) (*UpdateBindResponse, error)
	DeleteBind(context.Context, *DeleteBindRequest) (*DeleteBindResponse, error)
	// Server operations (servers are associated with backends)
	CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error)
	GetServer(context.Context, *GetServerRequest) (*GetServerResponse, error)
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	UpdateServer(context.Context, *UpdateServerRequest) (*UpdateServerResponse, error)
	DeleteServer(context.Context, *DeleteServerRequest) (*DeleteServerResponse, error)
	mustEmbedUnimplementedHAProxyManagerServiceServer()
}

// UnimplementedHAProxyManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHAProxyManagerServiceServer struct{}

func (UnimplementedHAProxyManagerServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) CommitTransaction(context.Context, *CommitTransactionRequest) (*CommitTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTransaction not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) CloseTransaction(context.Context, *CloseTransactionRequest) (*CloseTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTransaction not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) CreateBackend(context.Context, *CreateBackendRequest) (*CreateBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackend not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) GetBackend(context.Context, *GetBackendRequest) (*GetBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackend not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) ListBackends(context.Context, *ListBackendsRequest) (*ListBackendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackends not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) UpdateBackend(context.Context, *UpdateBackendRequest) (*UpdateBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackend not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) DeleteBackend(context.Context, *DeleteBackendRequest) (*DeleteBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackend not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) CreateFrontend(context.Context, *CreateFrontendRequest) (*CreateFrontendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFrontend not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) GetFrontend(context.Context, *GetFrontendRequest) (*GetFrontendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontend not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) ListFrontends(context.Context, *ListFrontendsRequest) (*ListFrontendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFrontends not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) UpdateFrontend(context.Context, *UpdateFrontendRequest) (*UpdateFrontendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFrontend not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) DeleteFrontend(context.Context, *DeleteFrontendRequest) (*DeleteFrontendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFrontend not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) CreateBind(context.Context, *CreateBindRequest) (*CreateBindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBind not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) GetBind(context.Context, *GetBindRequest) (*GetBindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBind not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) ListBinds(context.Context, *ListBindsRequest) (*ListBindsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBinds not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) UpdateBind(context.Context, *UpdateBindRequest) (*UpdateBindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBind not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) DeleteBind(context.Context, *DeleteBindRequest) (*DeleteBindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBind not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) GetServer(context.Context, *GetServerRequest) (*GetServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServers not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) UpdateServer(context.Context, *UpdateServerRequest) (*UpdateServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServer not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) DeleteServer(context.Context, *DeleteServerRequest) (*DeleteServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (UnimplementedHAProxyManagerServiceServer) mustEmbedUnimplementedHAProxyManagerServiceServer() {}
func (UnimplementedHAProxyManagerServiceServer) testEmbeddedByValue()                               {}

// UnsafeHAProxyManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HAProxyManagerServiceServer will
// result in compilation errors.
type UnsafeHAProxyManagerServiceServer interface {
	mustEmbedUnimplementedHAProxyManagerServiceServer()
}

func RegisterHAProxyManagerServiceServer(s grpc.ServiceRegistrar, srv HAProxyManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedHAProxyManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HAProxyManagerService_ServiceDesc, srv)
}

func _HAProxyManagerService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_CommitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).CommitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_CommitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).CommitTransaction(ctx, req.(*CommitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_CloseTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).CloseTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_CloseTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).CloseTransaction(ctx, req.(*CloseTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_CreateBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).CreateBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_CreateBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).CreateBackend(ctx, req.(*CreateBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_GetBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).GetBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_GetBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).GetBackend(ctx, req.(*GetBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_ListBackends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).ListBackends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_ListBackends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).ListBackends(ctx, req.(*ListBackendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_UpdateBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).UpdateBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_UpdateBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).UpdateBackend(ctx, req.(*UpdateBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_DeleteBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).DeleteBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_DeleteBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).DeleteBackend(ctx, req.(*DeleteBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_CreateFrontend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFrontendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).CreateFrontend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_CreateFrontend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).CreateFrontend(ctx, req.(*CreateFrontendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_GetFrontend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrontendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).GetFrontend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_GetFrontend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).GetFrontend(ctx, req.(*GetFrontendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_ListFrontends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFrontendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).ListFrontends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_ListFrontends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).ListFrontends(ctx, req.(*ListFrontendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_UpdateFrontend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFrontendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).UpdateFrontend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_UpdateFrontend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).UpdateFrontend(ctx, req.(*UpdateFrontendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_DeleteFrontend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFrontendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).DeleteFrontend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_DeleteFrontend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).DeleteFrontend(ctx, req.(*DeleteFrontendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_CreateBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).CreateBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_CreateBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).CreateBind(ctx, req.(*CreateBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_GetBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).GetBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_GetBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).GetBind(ctx, req.(*GetBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_ListBinds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBindsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).ListBinds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_ListBinds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).ListBinds(ctx, req.(*ListBindsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_UpdateBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).UpdateBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_UpdateBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).UpdateBind(ctx, req.(*UpdateBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_DeleteBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).DeleteBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_DeleteBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).DeleteBind(ctx, req.(*DeleteBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_CreateServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_GetServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).GetServer(ctx, req.(*GetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_ListServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_UpdateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).UpdateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_UpdateServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).UpdateServer(ctx, req.(*UpdateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAProxyManagerService_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HAProxyManagerServiceServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HAProxyManagerService_DeleteServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HAProxyManagerServiceServer).DeleteServer(ctx, req.(*DeleteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HAProxyManagerService_ServiceDesc is the grpc.ServiceDesc for HAProxyManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HAProxyManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "haproxy.v1.HAProxyManagerService",
	HandlerType: (*HAProxyManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _HAProxyManagerService_GetVersion_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _HAProxyManagerService_CreateTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _HAProxyManagerService_GetTransaction_Handler,
		},
		{
			MethodName: "CommitTransaction",
			Handler:    _HAProxyManagerService_CommitTransaction_Handler,
		},
		{
			MethodName: "CloseTransaction",
			Handler:    _HAProxyManagerService_CloseTransaction_Handler,
		},
		{
			MethodName: "CreateBackend",
			Handler:    _HAProxyManagerService_CreateBackend_Handler,
		},
		{
			MethodName: "GetBackend",
			Handler:    _HAProxyManagerService_GetBackend_Handler,
		},
		{
			MethodName: "ListBackends",
			Handler:    _HAProxyManagerService_ListBackends_Handler,
		},
		{
			MethodName: "UpdateBackend",
			Handler:    _HAProxyManagerService_UpdateBackend_Handler,
		},
		{
			MethodName: "DeleteBackend",
			Handler:    _HAProxyManagerService_DeleteBackend_Handler,
		},
		{
			MethodName: "CreateFrontend",
			Handler:    _HAProxyManagerService_CreateFrontend_Handler,
		},
		{
			MethodName: "GetFrontend",
			Handler:    _HAProxyManagerService_GetFrontend_Handler,
		},
		{
			MethodName: "ListFrontends",
			Handler:    _HAProxyManagerService_ListFrontends_Handler,
		},
		{
			MethodName: "UpdateFrontend",
			Handler:    _HAProxyManagerService_UpdateFrontend_Handler,
		},
		{
			MethodName: "DeleteFrontend",
			Handler:    _HAProxyManagerService_DeleteFrontend_Handler,
		},
		{
			MethodName: "CreateBind",
			Handler:    _HAProxyManagerService_CreateBind_Handler,
		},
		{
			MethodName: "GetBind",
			Handler:    _HAProxyManagerService_GetBind_Handler,
		},
		{
			MethodName: "ListBinds",
			Handler:    _HAProxyManagerService_ListBinds_Handler,
		},
		{
			MethodName: "UpdateBind",
			Handler:    _HAProxyManagerService_UpdateBind_Handler,
		},
		{
			MethodName: "DeleteBind",
			Handler:    _HAProxyManagerService_DeleteBind_Handler,
		},
		{
			MethodName: "CreateServer",
			Handler:    _HAProxyManagerService_CreateServer_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _HAProxyManagerService_GetServer_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _HAProxyManagerService_ListServers_Handler,
		},
		{
			MethodName: "UpdateServer",
			Handler:    _HAProxyManagerService_UpdateServer_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _HAProxyManagerService_DeleteServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "haproxy.proto",
}
