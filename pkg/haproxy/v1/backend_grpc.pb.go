// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: backend.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackendService_CreateBackend_FullMethodName = "/haproxy.v1.BackendService/CreateBackend"
	BackendService_GetBackend_FullMethodName    = "/haproxy.v1.BackendService/GetBackend"
	BackendService_ListBackends_FullMethodName  = "/haproxy.v1.BackendService/ListBackends"
	BackendService_UpdateBackend_FullMethodName = "/haproxy.v1.BackendService/UpdateBackend"
	BackendService_DeleteBackend_FullMethodName = "/haproxy.v1.BackendService/DeleteBackend"
)

// BackendServiceClient is the client API for BackendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BackendService provides CRUD operations for HAProxy backend configuration
type BackendServiceClient interface {
	CreateBackend(ctx context.Context, in *CreateBackendRequest, opts ...grpc.CallOption) (*CreateBackendResponse, error)
	GetBackend(ctx context.Context, in *GetBackendRequest, opts ...grpc.CallOption) (*GetBackendResponse, error)
	ListBackends(ctx context.Context, in *ListBackendsRequest, opts ...grpc.CallOption) (*ListBackendsResponse, error)
	UpdateBackend(ctx context.Context, in *UpdateBackendRequest, opts ...grpc.CallOption) (*UpdateBackendResponse, error)
	DeleteBackend(ctx context.Context, in *DeleteBackendRequest, opts ...grpc.CallOption) (*DeleteBackendResponse, error)
}

type backendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendServiceClient(cc grpc.ClientConnInterface) BackendServiceClient {
	return &backendServiceClient{cc}
}

func (c *backendServiceClient) CreateBackend(ctx context.Context, in *CreateBackendRequest, opts ...grpc.CallOption) (*CreateBackendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBackendResponse)
	err := c.cc.Invoke(ctx, BackendService_CreateBackend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetBackend(ctx context.Context, in *GetBackendRequest, opts ...grpc.CallOption) (*GetBackendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBackendResponse)
	err := c.cc.Invoke(ctx, BackendService_GetBackend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ListBackends(ctx context.Context, in *ListBackendsRequest, opts ...grpc.CallOption) (*ListBackendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBackendsResponse)
	err := c.cc.Invoke(ctx, BackendService_ListBackends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateBackend(ctx context.Context, in *UpdateBackendRequest, opts ...grpc.CallOption) (*UpdateBackendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBackendResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateBackend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) DeleteBackend(ctx context.Context, in *DeleteBackendRequest, opts ...grpc.CallOption) (*DeleteBackendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBackendResponse)
	err := c.cc.Invoke(ctx, BackendService_DeleteBackend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServiceServer is the server API for BackendService service.
// All implementations must embed UnimplementedBackendServiceServer
// for forward compatibility.
//
// BackendService provides CRUD operations for HAProxy backend configuration
type BackendServiceServer interface {
	CreateBackend(context.Context, *CreateBackendRequest) (*CreateBackendResponse, error)
	GetBackend(context.Context, *GetBackendRequest) (*GetBackendResponse, error)
	ListBackends(context.Context, *ListBackendsRequest) (*ListBackendsResponse, error)
	UpdateBackend(context.Context, *UpdateBackendRequest) (*UpdateBackendResponse, error)
	DeleteBackend(context.Context, *DeleteBackendRequest) (*DeleteBackendResponse, error)
	mustEmbedUnimplementedBackendServiceServer()
}

// UnimplementedBackendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackendServiceServer struct{}

func (UnimplementedBackendServiceServer) CreateBackend(context.Context, *CreateBackendRequest) (*CreateBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackend not implemented")
}
func (UnimplementedBackendServiceServer) GetBackend(context.Context, *GetBackendRequest) (*GetBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackend not implemented")
}
func (UnimplementedBackendServiceServer) ListBackends(context.Context, *ListBackendsRequest) (*ListBackendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackends not implemented")
}
func (UnimplementedBackendServiceServer) UpdateBackend(context.Context, *UpdateBackendRequest) (*UpdateBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackend not implemented")
}
func (UnimplementedBackendServiceServer) DeleteBackend(context.Context, *DeleteBackendRequest) (*DeleteBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackend not implemented")
}
func (UnimplementedBackendServiceServer) mustEmbedUnimplementedBackendServiceServer() {}
func (UnimplementedBackendServiceServer) testEmbeddedByValue()                        {}

// UnsafeBackendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServiceServer will
// result in compilation errors.
type UnsafeBackendServiceServer interface {
	mustEmbedUnimplementedBackendServiceServer()
}

func RegisterBackendServiceServer(s grpc.ServiceRegistrar, srv BackendServiceServer) {
	// If the following call pancis, it indicates UnimplementedBackendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackendService_ServiceDesc, srv)
}

func _BackendService_CreateBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateBackend(ctx, req.(*CreateBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetBackend(ctx, req.(*GetBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ListBackends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ListBackends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ListBackends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ListBackends(ctx, req.(*ListBackendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateBackend(ctx, req.(*UpdateBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_DeleteBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).DeleteBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_DeleteBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).DeleteBackend(ctx, req.(*DeleteBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackendService_ServiceDesc is the grpc.ServiceDesc for BackendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "haproxy.v1.BackendService",
	HandlerType: (*BackendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBackend",
			Handler:    _BackendService_CreateBackend_Handler,
		},
		{
			MethodName: "GetBackend",
			Handler:    _BackendService_GetBackend_Handler,
		},
		{
			MethodName: "ListBackends",
			Handler:    _BackendService_ListBackends_Handler,
		},
		{
			MethodName: "UpdateBackend",
			Handler:    _BackendService_UpdateBackend_Handler,
		},
		{
			MethodName: "DeleteBackend",
			Handler:    _BackendService_DeleteBackend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}
